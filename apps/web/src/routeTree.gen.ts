/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppCreateIndexRouteImport } from './routes/app/create/index'
import { Route as AppRoadmapsRoadmapIdRouteImport } from './routes/app/roadmaps/$roadmapId'

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCreateIndexRoute = AppCreateIndexRouteImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppRoadmapsRoadmapIdRoute = AppRoadmapsRoadmapIdRouteImport.update({
  id: '/roadmaps/$roadmapId',
  path: '/roadmaps/$roadmapId',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
  '/app/roadmaps/$roadmapId': typeof AppRoadmapsRoadmapIdRoute
  '/app/create': typeof AppCreateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
  '/app/roadmaps/$roadmapId': typeof AppRoadmapsRoadmapIdRoute
  '/app/create': typeof AppCreateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
  '/app/roadmaps/$roadmapId': typeof AppRoadmapsRoadmapIdRoute
  '/app/create/': typeof AppCreateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/'
    | '/login'
    | '/app/roadmaps/$roadmapId'
    | '/app/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/login' | '/app/roadmaps/$roadmapId' | '/app/create'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/'
    | '/login/'
    | '/app/roadmaps/$roadmapId'
    | '/app/create/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/create/': {
      id: '/app/create/'
      path: '/create'
      fullPath: '/app/create'
      preLoaderRoute: typeof AppCreateIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/roadmaps/$roadmapId': {
      id: '/app/roadmaps/$roadmapId'
      path: '/roadmaps/$roadmapId'
      fullPath: '/app/roadmaps/$roadmapId'
      preLoaderRoute: typeof AppRoadmapsRoadmapIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppRoadmapsRoadmapIdRoute: typeof AppRoadmapsRoadmapIdRoute
  AppCreateIndexRoute: typeof AppCreateIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppRoadmapsRoadmapIdRoute: AppRoadmapsRoadmapIdRoute,
  AppCreateIndexRoute: AppCreateIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
